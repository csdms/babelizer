.. image:: https://img.shields.io/travis/csdms/babelizer.svg
        :target: https://travis-ci.org/csdms/babelizer

.. image:: https://img.shields.io/badge/code%20style-black-000000.svg
        :target: https://github.com/csdms/babelizer

=============
The Babelizer
=============

Wrap BMI libraries with Python bindings


*****
About
*****

The *babelizer* is a utility for wrapping libraries, from a variety for
languages, that expose a Basic Model Interface (BMI) so that they can
imported as a Python package.


Supported languages:

*  C
*  C++
*  Fortran

************
Requirements
************

The *babelizer* is Python 3 only.


Apart from Python, the *babelzer* has a number of other requirements, all of which
can be obtained through either *pip* or *conda*, that will be automatically
installed when you install the *babelizer*.

To see a full listing of the requirements, have a look at the project's
*requirements.txt* file.

If you are a developer of the *babelizer* you will also want to install
additional dependencies for running the *babelizer*'s tests to make sure
that things are working as they should. These dependencies are listed
in *requirements-testing.txt*.

************
Installation
************

To install the *babelizer*, first create a new environment in
which *babelizer* will be installed. This, although not necessary, will
isolate the installation so that there won't be conflicts with your
base *Python* installation. This can be done with *conda* as::

  $ conda create -n babelizer python=3
  $ conda activate babelizer

Stable Release
==============

The *babelizer*, and its dependencies, can be installed either with *pip*
or *conda*. Using *pip*::

    $ pip install babelizer

Using *conda*::

    $ conda install babelizer -c conda-forge

From Source
===========

After downloading the the *babelizer* source code, run the following from
*babelizer*'s top-level folder (the one that contains *setup.py*) to
install *babelizer* into the current environment::

  $ pip install -e .


**********
Input file
**********

The *babelizer* requires a single, *toml*-formatted, input file that describes
the library you would like to wrap. This file is typically called, *babel.toml*.
An example of a blank *babel.toml* file,

.. code:: toml

  [library]
  language = "c"
  entry_point = []

  [build]
  undef_macros = []
  define_macros = []
  libraries = []
  library_dirs = []
  include_dirs = []
  extra_compile_args = []

  [plugin]
  name = ""
  requirements = []

  [info]
  plugin_author = "csdms"
  github_username = "pymt-lab"
  plugin_license = "MIT"
  summary = ""

You can generate *babel.toml* files using the *babelize quickstart* command.
For example, the above *babel.toml* was generated with,

.. code:: bash

  $ babelize quickstart --batch


Build section
=============

In the build section the user can specify flags to pass to the compiler
when building the extension.

Info section
============

Descriptive infomation about the package.

Github username
---------------

The GitHub username or organization where this package will be hosted. This
is used in generating links to the CI, docs, etc.

Author
------

Author of the wrapped package. Note that this is not the author of the
library being wrapped, just the code generated by the *babelizer*.

License
-------

Specify the Open Source license for the wrapped package. Note that this is not the
license for the library being wrapped, just for the code generated by the *babelizer*.

Summary
-------

A short description of the wrapped library.

Library section
===============

The *library* section specifies information about the library being babelized.

Entry point to the BMI
----------------------

A list of one or more entry points into the library.

The following will define a Python class *Hydrotrend* that wraps the function
*register_bmi_hydrotrend* defined in the library *bmi_hydrotrend*.

.. code:: toml

  [library]
  entry_point = [ "Hydrotrend=bmi_hydrotrend:register_bmi_hydrotrend" ]

An example of a C++ library (*bmi_child*), exposing a class *Child* (which
implemets a BMI) might look like the following,

.. code:: toml

  [library]
  entry_point = [ "Child=bmi_child:Child"]

Library language
----------------

The programming language of the library (possible values are "c", "c++",
"fortran", and "python").

.. code:: toml

  [library]
  language = "c"

Plugin section
==============

Name and extra requirements needed to build the babelized library.

Name
----

Name to use for the wrapped package. This is used when create the new
package, *pymt_<plugin_name>*. For example, the following will create
a new package, *pymt_foo*.

.. code:: toml

  [plugin]
  name = "foo"

Requirements
------------

List of packages required by the libaray being wrapped. For example, the
following indicates that the packages *foo* and *bar* are dependencies
for the package.

.. code:: toml

  [plugin]
  requirements = [ "foo", "bar"]


Example babel.toml
==================

Below is an example of a *babel.toml* file that describes a shared library,
written in C. In this example, the library, *bmi_hydrotrend*, exposes the
function *register_bmi_hydrotrend* that implements a BMI for a component
called *hydrotrend*.

.. code:: toml

  [library]
  language = "c"
  entry_point = [ "Hydrotrend=bmi_hydrotrend:register_bmi_hydrotrend",]

  [build]
  undef_macros = []
  define_macros = []
  libraries = []
  library_dirs = []
  include_dirs = []
  extra_compile_args = []

  [plugin]
  name = "hydrotrend"
  requirements = [ "hydrotrend",]

  [info]
  plugin_author = "csdms"
  github_username = "pymt-lab"
  plugin_license = "MIT"
  summary = "PyMT plugin for hydrotrend"


You can use the *babelize quickstart* command to generate *babel.toml* files.
For example the above *babel.toml* can be generated with the following,

.. code:: bash

  $ babelize quickstart --batch --summary="PyMT plugin for hydrotrend" --entry-point=Hydrotrend=bmi_hydrotrend:register_bmi_hydrotrend --name=hydrotrend --requirement=hydrotrend

********
Examples
********

Generate Python bindings for a C library that implements a BMI,

.. code:: bash

  $ babelize init babel.toml

Update an existing repository

.. code:: bash

  $ babelize update
